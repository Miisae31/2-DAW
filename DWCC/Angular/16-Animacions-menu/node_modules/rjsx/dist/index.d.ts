declare function render(node: any, parent: any, oldNode?: any): void;

declare function useCallback(callback: Function, args: any[]): Function;

declare function useContext(context: {
    value: any;
}): any;

declare type InitState<T> = (() => T) | T;
declare type SetState<T> = ((prevState: T) => T) | T;
declare type UseState<T> = [T, (setSate: SetState<T>) => void];
declare type MutableRefObject<T> = {
    current: T;
};
declare type DependencyList = readonly unknown[];
declare type EffectCallback = () => void;

declare function useEffect(callback: EffectCallback, deps?: DependencyList): void;

declare function useImperativeHandle(ref: any, createHandle: Function, args: any[]): void;

declare function useLayoutEffect(callback: Function, args: any[]): void;

declare function useMemo<T>(callback: () => T, args?: DependencyList): T;

declare function useReducer<T>(reducer: (state: T, action: SetState<T>) => T, initialState: InitState<T>, init?: Function): UseState<T>;

declare function useRef<T>(initialValue: T): MutableRefObject<T>;

declare function useState<T>(initialState: InitState<T>): UseState<T>;

declare function createContext(): {
    Consumer(props: Function | {
        value: any;
        children: any;
    }): any;
    Provider(props: {
        value: any;
        children: any;
    }): any;
};

export { createContext, render, useCallback, useContext, useEffect, useImperativeHandle, useLayoutEffect, useMemo, useReducer, useRef, useState };
